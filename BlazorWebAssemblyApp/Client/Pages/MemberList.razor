@page "/memberlist"
@using Microsoft.AspNetCore.Authorization
@using MeetMe.Client.Shared.Members
@attribute [Authorize]

@*<div class="text-center mt-3">
    <h2>Your matches -  found</h2>
</div>*@

<div class="container mt-3">
    <form class="form-inline">
        <div class="form-group">
            <label for="minAge">Age From</label>
            <input type="number" class="form-control ml-1" style="width: 70px" id="minAge" name="minAge" @bind="userParams.MinAge">
        </div>

        <div class="form-group px-2">
            <label for="maxAge">Age To</label>
            <input type="number" class="form-control ml-1" style="width: 70px" id="maxAge" name="maxAge" @bind="userParams.MaxAge">
        </div>

        <div class="form-group px-2">
            <label for="gender">Show: </label>
            <select class="form-control ml-1" style="width: 130px" id="gender" name="gender" @bind="userParams.Gender">
                <option value="male">Male</option>
                <option value="female">Female</option>
            </select>
        </div>
        <button type="button" class="btn btn-primary" style="margin-left:10px" @onclick="LoadUsers">Apply Filters</button>
        <button type="button" class="btn btn-info" style="margin-left:10px" @onclick="ResetFilter">Reset Filter</button>

        <div class="col">
            <div class="btn-group float-right">                
                <button type="button" class="btn @(userParams.OrderBy == "lastActive" ? "btn-primary" : "btn-light")"
                        @onclick="@(()=>userParams.OrderBy="lastActive")">Last Active</button>
                <button type="button" class="btn @(userParams.OrderBy == "lastActive" ? "btn-light" :  "btn-primary")"
                        @onclick="@(()=>userParams.OrderBy="created")">Newest Members</button>
            </div>
        </div>

    </form>
    <br>

    <div class="row justify-content-center">
        @if (Users == null)
        {
            <p>Loading</p>
        }
        else
        {

            @foreach (var user in Users)
            {
                <div class="col-sm-6 col-md-4 col-lg-8 col-xl-2">
                    <MemberCard User="user">
                    </MemberCard>
                </div>
            }
        }
    </div>
    <div class="row justify-content-center mt-2">
        @if (Pagination != null)
        {
            <nav>
                <ul class="pagination">
                    @for (int i = 1; i <= Pagination.TotalPages; i++)
                    {
                        var temp = i;
                        <li class="page-item" @onclick="(e => ChangePage(temp))"><a class="page-link">@i</a></li>
                    }
                </ul>
            </nav>
        }
    </div>
</div>


@code {
    public UserParams userParams { get; set; } = new UserParams();
    public PaginationHeader Pagination { get; set; } = null;

    public IEnumerable<UserForListDto> Users { get; set; }

    [Inject]
    private IMemberService _memberService { get; set; }

    [Inject]
    private ILocalStorageService _localStorage { get; set; }

    [Inject]
    private IAlertifyService _alertifyService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await _localStorage.GetItemAsync<UserForDetailedDto>("user");

        userParams.Gender = user.Gender == "male" ? "female" : "male";

        await LoadUsers();
    }

    private async Task ResetFilter()
    {
        var user = await _localStorage.GetItemAsync<UserForDetailedDto>("user");

        userParams.Gender = user.Gender == "male"? "female": "male";
        userParams.MinAge = 18;
        userParams.MaxAge = 99;

        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        (Users, Pagination) = await _memberService.GetUsers(userParams);
        if (Users == null)
        {
            await _alertifyService.Error("Error getting users");
        }
    }

    private async Task ChangePage(int page)
    {
        userParams.PageNumber = page;
        await LoadUsers();
    }
}
