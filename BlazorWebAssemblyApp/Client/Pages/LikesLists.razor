@page "/likeslists"
@using Microsoft.AspNetCore.Authorization
@using MeetMe.Client.Shared.Members
@attribute [Authorize]

<div class="text-center mt-3">
    <h2></h2>
</div>

<div class="container mt-3">

    <div class="row">
        <div class="btn-group">
            <button class="btn @(userParams.Likers ? "btn-primary" : "btn-light")" @onclick="() => SelectionChanged()">
                Members who like me
            </button>
            <button class="btn @(userParams.Likees ? "btn-primary" : "btn-light")" @onclick="() => SelectionChanged()">
                Members who I like
            </button>
        </div>
    </div>

    <br>

    <div class="row justify-content-center">
        @if (Users == null)
        {
            <p>Loading</p>
        }
        else
        {
            @foreach (var user in Users)
            {
                <div class="col-sm-6 col-md-4 col-lg-4 col-xl-2">
                    <MemberCard User="user"
                                ShowLike="false">
                    </MemberCard>
                </div>
            }
        }
    </div>
    <div class="row justify-content-center mt-2">
        @if (Pagination != null)
        {
            <nav>
                <ul class="pagination">
                    @for (int i = 1; i <= Pagination.TotalPages; i++)
                    {
                        var temp = i;
                        <li class="page-item" @onclick="(e => ChangePage(temp))"><a class="page-link">@i</a></li>
                    }
                </ul>
            </nav>
        }
    </div>


</div>

@code {

    public IEnumerable<UserForListDto> Users { get; set; }
    public UserParams userParams { get; set; } = new UserParams() { Likers = true};
    public PaginationHeader Pagination { get; set; } = null;

    [Inject]
    private IMemberService _memberService { get; set; }

    [Inject]
    private IAlertifyService _alertifyService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        (Users, Pagination) = await _memberService.GetUsers(userParams);
        if (Users == null)
        {
            await _alertifyService.Error("Error getting users");
            return;
        }
        StateHasChanged();
    }

    private async Task SelectionChanged()
    {
        userParams.Likees = !userParams.Likees;
        userParams.Likers = !userParams.Likers;
        await LoadUsers();
    }
    private async Task ChangePage(int page)
    {
        userParams.PageNumber = page;
        await LoadUsers();
    }
}
